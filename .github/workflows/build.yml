name: "Build"

on:
  workflow_dispatch:
  push:
    branches:
      - '*'

jobs:
  build:
    name: "Build for ${{ matrix.os }} ${{ matrix.arch }}"
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        build_type: [ "release", "debug"]
        include:
          - os: windows-latest
            arch: i686-pc-windows-msvc
            artifact_name: "mbf-bridge-windows-x86"
            binary_extension: ".exe"

          - os: windows-latest
            arch: x86_64-pc-windows-msvc
            artifact_name: "mbf-bridge-windows-x64"
            binary_extension: ".exe"

          - os: ubuntu-latest
            arch: x86_64-unknown-linux-gnu
            artifact_name: "mbf-bridge-linux-x64"

          - os: macos-13
            arch: x86_64-apple-darwin
            artifact_name: "mbf-bridge-macos-intel"

          - os: macos-13
            arch: aarch64-apple-darwin
            artifact_name: "mbf-bridge-macos-arm"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ matrix.os }}-${{ matrix.arch }}-cargo-${{ matrix.build_type}}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-cargo-${{ matrix.build_type}}-${{ hashFiles('**/Cargo.lock') }}
            ${{ matrix.os }}-${{ matrix.arch }}-cargo-${{ matrix.build_type}}

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.arch }}

      - name: Install dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev

      - name: Set macOS deployment target (macOS only)
        if: runner.os == 'macOS'
        run: echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

      - name: Build
        shell: bash
        run: |
          cargo build --target ${{ matrix.arch }} --${{ matrix.build_type }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ matrix.build_type }}
          path: target/${{ matrix.arch }}/${{ matrix.build_type }}/mbf_bridge${{ matrix.binary_extension }}

  lipo:
    name: "Create macOS universal binary"
    runs-on: macos-13
    needs: build
    strategy:
      matrix:
        build_type: [ "release", "debug"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: mbf-bridge-macos-*-${{ matrix.build_type }}
          path: target/

      - name: Create universal binary
        run: |
          lipo -create -output ModsBeforeFriday.app/Contents/MacOS/mbf-bridge \
            target/mbf-bridge-macos-intel-${{ matrix.build_type }}/mbf_bridge \
            target/mbf-bridge-macos-arm-${{ matrix.build_type }}/mbf_bridge

      - name: Prepare macOS app bundle
        run: |
          mkdir build
          mv ModsBeforeFriday.app build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mbf-bridge-macos-universal-${{ matrix.build_type }}
          path: build
